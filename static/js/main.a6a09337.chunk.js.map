{"version":3,"sources":["constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","props","id","name","email","src","className","alt","CardList","cardsArray","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","App","this","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","logger","createLogger","rootReducder","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6a09337.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './constants.js';\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: true })\r\n        default:\r\n            return state;\r\n\r\n\r\n    }\r\n}","\r\n\r\n\r\nconst Card = (props) => {\r\n    const { id, name, email } = props;\r\n    let src = `https://robohash.org/${id}?size=200x200`\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 wr\">        \r\n            <img src={ src} alt='robots' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardsArray = robots.map((user, i) =>\r\n        <Card\r\n            key={i}\r\n            id={user.id}\r\n            name={user.name}\r\n            email={user.email}\r\n        />\r\n    );\r\n    return (\r\n        <div >\r\n        \r\n        {cardsArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","const SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" placeholder=\"search robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","const Scroll = (props) => {\r\n    return (\r\n        <div\r\n            style={\r\n                {\r\n                    overflowY: 'scroll',\r\n                    \r\n                    height: '100vh'\r\n                }\r\n            }\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\nimport \"./App.css\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.searchRobots.isPending,\r\n    error: state.searchRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n\r\n    if (isPending) {\r\n      return <h1 className=\"tc\"> Loading ... </h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then((response) => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createLogger } from \"redux-logger\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport thunkMiddleware from 'redux-thunk';\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\n\n\n\n\nconst logger = createLogger();\n\nconst rootReducder = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducder, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n  ,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}